------------------------------------------------------------------------------------
化简算法
------------------------------------------------------------------------------------
化简算法的两个主要思路 co-occurrence analysis 与 hash consing

co-occurrence Analysis.
------------------------------------------------------------------------------------

关注在一个类型中同时在正反两个位置出现的每一个变量，并记录它总是与哪些其他变量和类型一起出现。

啥是 co-occurrence
如果一个变量 𝑣 是同一 union 类型的一部分 ... ⊔ 𝑣 ⊔ ... ⊔ 𝜏 ⊔ ...
或同一 intersection 类型的一部分 ... ⊓ 𝑣 ⊓ ... ⊓ 𝜏 ⊓ ...
(e.g. 𝑣 ⊔ int, 𝑣 ⊓ int, 𝑣 与 int 共现, 𝛼 ⊔ 𝛽, 𝛼 ⊓ 𝛽, 𝛼 与 𝛽 共现)
则这个变量 𝑣 伴随一个类型 𝜏 出现，基于这个信息, 可以执行三种 simplification:

1. Removal of polar variable。
我们想要移除只出现在表达式正极或负极的类型变量。
例如 𝜆𝑥.𝑥 + 1 , 类型为 𝛼 ⊓ int → int，𝛼 是重复的，因为只出现在负极，不管调用者 𝛼 选择什么，
函数仍然需要一个 int 参数，并且返回一个 int 结果。所以，我们可以移除 𝛼 得到简化的 int → int。
另一个例子，int 为参数永远不会 terminates 的函数的类型 int → 𝛼，可以被简化为 int → ⊥。

2. Unification of indistinguishable variables
之前提到 if-then-else 的 natural 类型 bool → 𝛼 → 𝛽 → 𝛼 ⊔ 𝛽 与 简化类型 bool → 𝛼 → 𝛼 → 𝛼 等价。
(e.g. bool → int → float → int ⊔ float 等价于 bool → float → float → float )
之所以等价是因为类型变量 𝛼 与 𝛽 的 positive occurrences 是不可区分的，只要产生一个 𝛼，也会产生一个 𝛽。
我们不能区分 𝛼 与 𝛽，所以可以合并。
基于 co-occurrence 分析的结果，我们可以合并总是一起出现在正极或者负极或者同时出现在正负极的变量。

3. Flattening of "variable sandwiches"  e.g. 𝑣 ≤ 𝜏 ≤ 𝑣
"变量三明治 "是一个类型变量 𝑣 的类型 𝜏 既是上限又是下限，即 𝑣 ≤ 𝜏 和 𝑣 ≥ 𝜏。这意味着 𝑣 等同于 𝜏。
在 coalesced type 中，将会表现为 𝑣 与 𝜏 正负极同时出现。
因此，我们可以使用共现分析的结果来移除夹在两个相同边界之间的变量。
举个例子，可以把 𝛼 ⊓ int → 𝛼 ⊔ int 简化为 int → int。
从概念上讲，这个想法概括了上面提到过的 Removal of polar variable。
事实上，如果一个变量从未在正极出现，概念上等同它与类型 ⊥ 同时同时出现在正极与负极，
所以我们可以用 ⊥ 替换该变量（即从所有 union 中移除该变量）。
(e.g. 𝛼 ⊓ int → int 等价于 𝛼 ⊓ int → int ⊔ 𝛼 ⊔ ⊥ 等价于 int → int ⊔ ⊥ 等价于 int → int)

以上这些转换都在做有效化简，它们产生的新类型包含较少的 subterm，但仍然等同于原类型（即互为subterm）。
因此，这些转换也保留了 principality。


Hash Consing. 删除 coalesced type 表达式中的重复结构
------------------------------------------------------------------------------------

let 𝑓 = 𝜆𝑥. { L = 𝑥 ; R = 𝑓 𝑥 } in 𝑓
推导出的 coalesced type
𝛼 → { L : 𝛼 ; R : 𝜇𝛽. { L : 𝛼 ; R : 𝛽 } }
外层的 record 结构重复，我们期望
𝛼 → 𝜇𝛽. { L : 𝛼 ; R : 𝛽 }
可以通过在 coalesceType 函数中对 coalesced type 进行 Hash Consing 来实现：
我们可以缓存整个类型表达式，而不是简单缓存哪些变量处于被 coalesced 过程；
当我们递归过程发现一个已经被 coalesced 过的类型表达式时，就在这个位置引入一个递归类型变量，去除多余的外层类型。


CompactType
------------------------------------------------------------------------------------
上述两种方法在直接使用的效果并不理想。
首先，我们不能在 non-coalesced types 上使用，因为 co-occurrence 分析会遗失只有边界被扁平化之后才会出现信息，
例如，如果我们推断出一个类型变量 𝛼，其上界为 𝜏0 → 𝜏1 和 𝜏2 → 𝜏3，
只有在将边界扁平化，并将函数类型合并为 𝜏0 ⊔ 𝜏2 → 𝜏1 ⊓ 𝜏3 之后，才能注意到 𝜏0, 𝜏2 和 𝜏1, 𝜏3 的共现。
其次，在最终的 coalesced type representation 上执行这种函数类型合并所需的 normalization steps 是很尴尬的，
因为它在语法上过于松散（它可以表示与推断类型不对应的类型，例如 merging unions 与 intersections）。

由于以上原因，我们在 SimpleType 和 Type 之间引入了一个中间的 compactType 表示，以便更容易地进行化简。
compactType representation 对应于类型的 normalized representation，其中所有的非递归变量的边界都被 coalesced。
compactTypeScheme 的 recVars字段记录了递归类型变量的边界（它们是循环的无法被 coalesced）。

将 SimpleType 转换为 CompactTypeScheme 的 compactType 函数比较像之前的 coalesceType 函数，直截了当。
simplifyType 函数稍微复杂一些，需要先执行 co-occurrence analysis pass，再执行 rewriting pass。
hash consing 则作为 coalesceCompactType 函数的一部分来实现。


canonicalization
------------------------------------------------------------------------------------

合并 recursive types 的 type canonicalization 算法：
let rec r = fun a -> r in if true then r else r
的推导结果 (⊤ -> 'a) as 'a 替代 ⊤ -> (⊤ -> 'a) as 'a ∨ (⊤ -> 'b) as 'b
